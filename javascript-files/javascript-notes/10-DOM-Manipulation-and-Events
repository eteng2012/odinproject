DOM is Document Object Model, tree representation of contents in webpage
When working with DOM, use CSS selectors to target nodes
Example: class is display in container, can do div.display, .display, #container > .display, div#container > div.display

Relational selectors: firstElementChild, lastElementChild
Example: container.firstElementChild

Difference from HTML is that nodes are JS objects, have properties/methods

element.querySelector(selector) returns reference to first match of selector
element.querySelectorAll(selector) returns NodeList of references to all matches
Return value is not an array, NodeList has some methods missing
Can convert to Array with Array.from()

document.createElement("tagname", [options]) makes new element of tag type tagname
Options are optional parameters
This function does not put new element in DOM, it creates it in memory so can be manipulated before adding to page

To add to DOM:
Append: parentNode.appendChild(childnode) appends childNode as last child of parent
    parentNode.insertBefore(newnode, referencenode) inserts before reference node
Remove: parentNode.removeChild(child) removes child from parentNode and returns ref to child

When have reference to element, can alter element

Adding Inline Style: div.style.___ = ___ or div.setAttribute(...,...)
Examples: div.style.color = "blue, div.setAttribute("style", "color: blue; background: white;")
When doing .style, if using . to access need camelCase, if use [] can do camel or - (kebab case)

Can do .getAttribute("id") or removeAttribute("id")

Working with Classes:
div.classList.add("new") adds class "new" to div
.remove("new"), .toggle("active") adds if not there, removes if is there

Adding Text Content:
div.textContent = "Hello";

Adding HTML Content:
div.innerHTML = "<span>Hello</span>"

Example of Above:
<!-- your HTML file: -->
<body>
  <h1>THE TITLE OF YOUR WEBPAGE</h1>
  <div id="container"></div>
</body>

// your JavaScript file
const container = document.querySelector("#container");

const content = document.createElement("div");
content.classList.add("content");
content.textContent = "This is the glorious text-content!";

container.appendChild(content);

This creates:
<!-- The DOM -->
<body>
  <h1>THE TITLE OF YOUR WEBPAGE</h1>
  <div id="container">
    <div class="content">This is the glorious text-content!</div>
  </div>
</body>

This does not alter HTML!

Because JS is run when HTML file reaches script tag, put script tag at end so nodes are first created
Or can put in <head> part and use keyword defer: <script src="js-file.js" defer></script>

Practice in Projects Folder

Events are used to make JS DOM manipulation happen dynamically
Include clicks, hovering, ...

3 ways to do it include:
    Specify function attributes directly on HTML elements
    Set proterties in form of on<eventType>, like onclick, onmousedown on DOM nodes in JS
    Attach event listeners to DOM nodes in JS

Event listeners preferred

Method 1: <button onclick="alert('Hello World')">Click Me</button>

Method 2: 
const btn = document.querySelector("#btn"); //exists element with id = btn
btn.onclick = () => alert("Hello World"); //arrow function, accepts no parameters, does alert

Issue is DOM element can only have one onclick property

Method 3:
const btn = document.querySelector("#btn");
btn.addEventListener("click", () => {
  alert("Hello World");
});

First parameter click is keyword, second parameter is function

Parameter in callback function:
btn.addEventListener("click", function (e) {
  console.log(e);
});// on click will log the DOM line

The e parameter contains object that refers to event itself
The object has useful properties/methods

Practice in the Projects Folder

To attach listener to groups of nodes, need to use .querySelectorAll("button")
Then, iterate through NodeList with: var_name.forEach((button) => { button.addEventListener(...)})

Other events include click, dblclick, keydown, keyup

